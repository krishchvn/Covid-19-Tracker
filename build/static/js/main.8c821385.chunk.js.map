{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","console","log","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso3","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8c821385.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\nimport './InfoBox.css';\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n  return (\r\n    <Card\r\n      className={`infoBox ${active && 'infoBox--selected'} ${\r\n        isRed && 'infoBox--Red'\r\n      }`}\r\n      onClick={props.onClick}>\r\n      <CardContent>\r\n        <Typography className='infoBox__title' color='textsecondary'>\r\n          {title}\r\n        </Typography>\r\n\r\n        <h2 className={`infoBox__cases${!isRed && 'infoBox__cases--green'}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className='infoBox__total' color='secondary'>\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from 'react';\r\nimport { Circle, Popup } from 'react-leaflet';\r\nimport numeral from 'numeral';\r\n//import { CircleMarker } from 'leaflet';\r\nimport './Map.css'\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: '#CC1034',\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: '#7dd71d',\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: '#fb4443',\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  console.log(\"sortdata\", data);\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\n/*  sortedData.sort((a,b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    })\r\n    return sortedData;\r\n*/\r\n\r\nexport const prettyPrintStat = (stat) => \r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\nexport const showDataOnMap = (data , casesType =\"cases\" ) =>\r\n        data.map((country) => (\r\n      <Circle\r\n        center={[country.countryInfo.lat, country.countryInfo.long]}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillColor={casesTypeColors[casesType].hex}\r\n        fillOpacity={0.4}\r\n        radius={\r\n          Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n        }\r\n      >\r\n        <Popup>\r\n          <div className=\"info-container\">\r\n            <div\r\n              className=\"info-flag\"\r\n              style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n            ></div>\r\n            <div className=\"info-name\">{country.country}</div>\r\n            <div className=\"info-cases\">\r\n              Cases: {numeral(country.cases).format(\"0,0\")}\r\n            </div>\r\n            <div className=\"info-recovered\">\r\n              Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n            </div>\r\n            <div className=\"info-deaths\">\r\n              Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n            </div>\r\n          </div>\r\n        </Popup>\r\n      </Circle>\r\n    ));\r\n    ","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;","import React from 'react'\r\nimport './Table.css';\r\nimport numeral from 'numeral';\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            <h3 className=\"table__title\">Total Cases By Country</h3>\r\n            {countries.map ((country ) => (\r\n                <tr>\r\n                    <td>{country.country}</td>\r\n                    <td>\r\n                        <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n                    </td>\r\n                </tr> \r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\nimport \"./Graph.css\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks : {\r\n      label: function(tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: 'time',\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n        {\r\n        gridLines: {\r\n          display: true,\r\n        },\r\n        ticks : {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n\r\nconst buildChartData = (data, casesType ) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n\r\n  for( let date in data.cases)  {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\n\r\n\r\nfunction LineGraph({ casesType , ...props}) {\r\n  const [data, setData] = useState({});\r\n\r\n  // \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n    await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // console.log(data);\r\n        let chartData = buildChartData(data, casesType);\r\n        console.log(chartData);\r\n        setData(chartData);\r\n      });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  \r\n  return (\r\n    <div className={props.className}>\r\n    <div className=\"graph\">\r\n      { data?.length > 0 && ( \r\n      \r\n      <Line data = {{\r\n        datasets: [\r\n          {\r\n          backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n          borderColor: \"#CC1034\",\r\n          data,\r\n        },\r\n      ],\r\n      }}\r\n       options = {options}\r\n      />\r\n      )}\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\nimport numeral from 'numeral';\n\nconst App = () => {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({\n    lat: 34.80746,\n    lng: -40.4796,\n  });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch('https://disease.sh/v3/covid-19/countries')\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso3,\n          }));\n\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  console.log('CasesType: ', casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === 'worldwide'\n        ? 'https://disease.sh/v3/covid-19/all'\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        countryCode === 'worldwide'\n          ? setMapCenter([34.80746, -40.4796])\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        countryCode === 'worldwide' ? setMapZoom(3) : setMapZoom(3);\n      });\n  };\n\n // console.log(countryInfo);\n\n  return (\n    <div className='App'>\n      <div className='app__left'>\n        <div className='app__header'>\n          <h1 >Covid-19 Tracker</h1>\n          <FormControl className='app__dropdown'>\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}>\n              <MenuItem value='worldwide'>Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className='app__stats'>\n          <InfoBox\n            isRed\n            active={casesType === 'cases'}\n            onClick={(e) => setCasesType('cases')}\n            title='Coronavirus cases'\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n\n          <InfoBox\n            active={casesType === 'recovered'}\n            onClick={(e) => setCasesType('recovered')}\n            title='Recovered'\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n\n          <InfoBox\n            isRed\n            active={casesType === 'deaths'}\n            onClick={(e) => setCasesType('deaths')}\n            title='Deaths '\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n\n        <Map\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n          countries={mapCountries}\n        />\n      </div>\n\n      <Card className='app__right'>\n        <CardContent>\n          <Table countries={tableData} />\n          <h3 className='app__graphTitle'> Worldwide New {casesType}</h3>\n          <LineGraph className='app__graph' casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}