{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chavan\\\\covid-tracker\\\\src\\\\util.js\";\nimport React from 'react';\nimport { Circle, Popup } from 'react-leaflet';\nimport numeral from 'numeral';\nimport { CircleMarker } from 'leaflet';\nconst casesTypeColors = {\n  cases: {\n    hex: '#CC1034',\n    multiplier: 800\n  },\n  recovered: {\n    hex: '#7dd71d',\n    multiplier: 1200\n  },\n  deaths: {\n    hex: '#fb4443',\n    multiplier: 2000\n  }\n};\nexport const sortData = data => {\n  const sortedData = [...data];\n  return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1);\n  /*  sortedData.sort((a,b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    })\r\n    return sortedData;\r\n    */\n}; //to draw circles on map acc to cases with tooltip\n\nexport const showDataOnMap = (data, casesType = 'cases') => data.map(country => /*#__PURE__*/React.createElement(Circle, {\n  center: [country.countryInfo.lat, country.countryInfo.long],\n  fillOpacity: 0.3,\n  color: casesTypeColors[casesType.hex],\n  fillColor: casesTypeColors[casesType.hex],\n  radius: Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Popup, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }\n}, \"Popup\"))));","map":{"version":3,"sources":["C:/Users/Chavan/covid-tracker/src/util.js"],"names":["React","Circle","Popup","numeral","CircleMarker","casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","countryInfo","lat","long","Math","sqrt"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,eAA9B;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,YAAT,QAA6B,SAA7B;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,GAAG,EAAE,SADA;AAELC,IAAAA,UAAU,EAAE;AAFP,GADe;AAKtBC,EAAAA,SAAS,EAAE;AACTF,IAAAA,GAAG,EAAE,SADI;AAETC,IAAAA,UAAU,EAAE;AAFH,GALW;AAStBE,EAAAA,MAAM,EAAE;AACNH,IAAAA,GAAG,EAAE,SADC;AAENC,IAAAA,UAAU,EAAE;AAFN;AATc,CAAxB;AAeA,OAAO,MAAMG,QAAQ,GAAIC,IAAD,IAAU;AAChC,QAAMC,UAAU,GAAG,CAAC,GAAGD,IAAJ,CAAnB;AAEA,SAAOC,UAAU,CAACC,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACT,KAAF,GAAUU,CAAC,CAACV,KAAZ,GAAoB,CAAC,CAArB,GAAyB,CAApD,CAAP;AAEA;;;;;;;;;AASD,CAdM,C,CAgBP;;AACA,OAAO,MAAMW,aAAa,GAAG,CAACL,IAAD,EAAOM,SAAS,GAAG,OAAnB,KAC3BN,IAAI,CAACO,GAAL,CAAUC,OAAD,iBACP,oBAAC,MAAD;AACE,EAAA,MAAM,EAAE,CAACA,OAAO,CAACC,WAAR,CAAoBC,GAArB,EAA0BF,OAAO,CAACC,WAAR,CAAoBE,IAA9C,CADV;AAEE,EAAA,WAAW,EAAE,GAFf;AAGE,EAAA,KAAK,EAAElB,eAAe,CAACa,SAAS,CAACX,GAAX,CAHxB;AAIE,EAAA,SAAS,EAAEF,eAAe,CAACa,SAAS,CAACX,GAAX,CAJ5B;AAKE,EAAA,MAAM,EACJiB,IAAI,CAACC,IAAL,CAAUL,OAAO,CAACF,SAAD,CAAjB,IAAgCb,eAAe,CAACa,SAAD,CAAf,CAA2BV,UAN/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBASE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,CATF,CADF,CADK","sourcesContent":["import React from 'react';\r\nimport { Circle, Popup } from 'react-leaflet';\r\nimport numeral from 'numeral';\r\nimport { CircleMarker } from 'leaflet';\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: '#CC1034',\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: '#7dd71d',\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: '#fb4443',\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n\r\n  /*  sortedData.sort((a,b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    })\r\n    return sortedData;\r\n    */\r\n};\r\n\r\n//to draw circles on map acc to cases with tooltip\r\nexport const showDataOnMap = (data, casesType = 'cases') =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.3}\r\n      color={casesTypeColors[casesType.hex]}\r\n      fillColor={casesTypeColors[casesType.hex]}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n      >\r\n      <Popup>\r\n        <h1>Popup</h1>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n"]},"metadata":{},"sourceType":"module"}