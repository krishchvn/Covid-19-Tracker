{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Chavan\\\\covid-tracker\\\\src\\\\LineGraph.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport numeral from 'numeral';\nimport \"./Graph.css\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: 'time',\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: true\n      },\n      ticks: {\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nfunction LineGraph({\n  casesType = 'cases'\n}) {\n  const [data, setData] = useState({}); // \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"\n\n  const buildChartData = (data, casesType = 'cases') => {\n    const chartData = [];\n    let lastDataPoint;\n\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint\n        };\n        chartData.push(newDataPoint);\n      }\n\n      lastDataPoint = data[casesType][date];\n    }\n\n    ;\n    return chartData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120').then(response => response.json()).then(data => {\n        // console.log(data);\n        let chartData = buildChartData(data, 'cases');\n        console.log(chartData);\n        setData(chartData);\n      });\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, \"Graph here\"), (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/React.createElement(Line, {\n    data: {\n      datasets: [{\n        backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n        borderColor: \"#CC1034\",\n        data: data\n      }]\n    },\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default LineGraph;","map":{"version":3,"sources":["C:/Users/Chavan/covid-tracker/src/LineGraph.js"],"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","casesType","setData","buildChartData","chartData","lastDataPoint","date","cases","newDataPoint","x","y","push","fetchData","fetch","then","response","json","console","log","length","datasets","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\nimport \"./Graph.css\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks : {\r\n      label: function(tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: 'time',\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n        {\r\n        gridLines: {\r\n          display: true,\r\n        },\r\n        ticks : {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  }\r\n}\r\n\r\n\r\nfunction LineGraph({ casesType = 'cases'}) {\r\n  const [data, setData] = useState({});\r\n\r\n  // \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"\r\n\r\n  const buildChartData = (data, casesType = 'cases') => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for( let date in data.cases)  {\r\n      if (lastDataPoint) {\r\n        const newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint,\r\n        };\r\n        chartData.push(newDataPoint);\r\n      }\r\n\r\n      lastDataPoint = data[casesType][date];\r\n    };\r\n    return chartData;\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n    await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n       // console.log(data);\r\n        let chartData = buildChartData(data, 'cases');\r\n        console.log(chartData);\r\n        setData(chartData);\r\n      });\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  \r\n  return (\r\n    <div>\r\n      <h1>Graph here</h1>\r\n      { data?.length > 0 && ( \r\n      <Line  data = {{\r\n        datasets: [\r\n          {\r\n          backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n          borderColor: \"#CC1034\",\r\n          data: data,\r\n        }\r\n      ]\r\n      }} options = {options}/>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n"]},"metadata":{},"sourceType":"module"}